#!/usr/bin/env bash

set -e

cat <<EOF
Tests updating from the current boilerplate master to the current
commit, and then reverting to the master.
EOF

# Sometimes, e.g. when openshift/release runs this test in a rehearsal,
# we're *at* master. In such cases, this test would legitimately fail on
# `boilerplate-commit` because there's nothing to update and therefore
# nothing to commit. We can skip the test in such cases (master has
# already been tested anyway).
if [[ $(git rev-parse HEAD) == $(git rev-parse master) ]]; then
    echo "==SKIP== We're already at master"
    exit 0
fi

# TODO: This test requires an active network connection to access the
# actual boilerplate github repository. We should label it as such and
# make a granny switch to disable all such tests.

HERE=${0%/*}

REPO_ROOT=$(git rev-parse --show-toplevel)

source $REPO_ROOT/test/lib.sh

# Hack: some checks will fail if master is at an earlier tag. Other
# tests validate the proper setting of this variable.
export SKIP_IMAGE_TAG_CHECK=1

repo=$(empty_repo)
add_cleanup $repo

bootstrap_repo $repo

cd $repo

boilerplate_master=$(new_boilerplate_clone)

override_boilerplate_repo $boilerplate_master || exit $?

add_convention $repo test/test-base-convention
make boilerplate-update || exit $?
check_update $repo 04-check-after-init || exit $?
# So the next update starts "clean"
./boilerplate/_lib/boilerplate-commit

reset_boilerplate_repo

make boilerplate-update || exit $?
check_update $repo 04-check-new-version-update || exit $?
# So the next update starts "clean"
./boilerplate/_lib/boilerplate-commit

override_boilerplate_repo $boilerplate_master || exit $?

make boilerplate-update || exit $?
check_update $repo 04-check-new-version-update || exit $?
